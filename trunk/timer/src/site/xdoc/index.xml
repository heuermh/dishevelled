<?xml version="1.0" encoding="ISO-8859-1"?>
<!--

    dsh-timer  Timer with nanosecond resolution and summary statistics
    on recorded elapsed times.
    Copyright (c) 2004-2012 held jointly by the individual authors.

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation; either version 3 of the License, or (at
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
    License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this library;  if not, write to the Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

    > http://www.fsf.org/licensing/licenses/lgpl.html
    > http://www.opensource.org/licenses/lgpl-license.php

-->
<document>
  <properties>
    <title>dishevelled.org timer</title>
  </properties>

<body>
<section name="Summary">
<p>
dishevelled.org <b>timer</b> provides a timer class with nanosecond resolution and summary
statistics on recorded elapsed times.  The timer project requires java 1.5 or later.</p>
</section>

<section name="Example">
<p>
<source>
Timer t = new Timer();
for (int i = 0; i &lt; 100; i++) {
  t.start();
  // ... the code being measured ...
  t.stop();
}

System.out.println("timer results, n=" + t.size());
System.out.println("  mean=" + t.mean() + " stdev=" + t.standardDeviation());
System.out.println("  min=" + t.min() + " max=" + t.max());
</source>
</p>

<p>
The recorded times themselves are not preserved, however, only
the summary statistics.  As a consequence <code>start()</code> and
<code>stop()</code> can be called many number of times without
requiring large amounts of memory.
</p>
</section>

<section name="Benchmarks">
<p>
Execution time can be sensitive to various factors, such as order of execution, runtime optimization from the just-in-time compiler (JIT), and garbage collection. This library provides static methods on <a href="apidocs/org/dishevelled/timer/Timer.html">Timer</a> to help deal with these factors.
</p>

<p>
Given a few benchmarks to run, wrap them in Runnable objects
<source>
Runnable r0 = new Runnable() { public void run() { ... } };
Runnable r1 = new Runnable() { public void run() { ... } };
Runnable r2 = new Runnable() { public void run() { ... } };
List&lt;Runnable&gt; benchmarks = Arrays.asList(new Runnable[] { r0, r1, r2 });
</source>
</p>
 
<p>
Prime the JIT by running the benchmarks several times
<source>
Timer.prime(benchmarks, 1000);
</source>
</p>

<p>
Then measure the execution times of the benchmarks by running them several times in random execution order
<source>
Map&lt;Runnable, Timer&gt; result = Timer.shuffle(benchmarks, 100, 100);
</source>
</p>

<p>
Summary statistics on recorded execution times are captured by the timer returned for each Runnable benchmark
<source>
for (Map.Entry&lt;Runnable, Timer&gt; e : result.entrySet()) {
  Runnable r = e.getKey();
  Timer t = e.getValue();
  System.out.println("runnable=" + r + " mean execution time=" + t.mean() + "ns");
}
</source>
</p>
</section>

<section name="Acknowledgements">

  <ul>
    <li>Powered by <a href="http://maven.apache.org">Maven</a>.</li>
    <li>Project hosting by <a href="http://sourceforge.net">SourceForge.net</a>.</li>
  </ul>
  <p><img src="http://sourceforge.net/sflogo.php?group_id=113165&amp;type=1" width="88" height="31" border="0" alt="SourceForge.net Logo"/></p>
</section>

</body>
</document>
