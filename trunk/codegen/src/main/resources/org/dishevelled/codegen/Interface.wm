#*

    dsh-codegen  Source code generation suite.
    Copyright (c) 2004-2006 held jointly by the individual authors.

    This library is free software; you can redistribute it and/or modify it 
    under the terms of the GNU Lesser General Public License as published 
    by the Free Software Foundation; either version 2.1 of the License, or (at 
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT 
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or 
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
    License for more details.

    You should have received a copy of the GNU Lesser General Public License 
    along with this library;  if not, write to the Free Software Foundation, 
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

    > http://www.gnu.org/copyleft/lesser.html 
    > http://www.opensource.org/licenses/lgpl-license.php

*#
$!{license}
package ${id.PackageName};

#foreach ($a in $id.Attributes)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
#end
#end
#foreach ($a in $id.Associations)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
#end
#end
#if (($id.Associations.size() > 0) || ($id.Specializes.size() > 0))

#end
#foreach ($a in $id.Associations)
#if (${id.PackageName} != ${a.PackageName})
import ${a.PackageName}.${a.Upper};
#end
#end
#foreach ($s in $id.Specializes)
#if (${id.PackageName} != ${s.PackageName})
import ${s.PackageName}.${s.Upper};
#end
#end

/**
 * ${id.Description}
 *
 * @author ${id.Author}
 * @version ${id.Version}
 */
public interface ${id.Upper}
#if ($id.Specializes.size() > 0)
    extends #foreach ($i in $id.Specializes)${i.Upper}, #end
#end
{
#foreach ($a in $id.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")

    /**
     * Return the ${r.Lower} for this ${id.Lower}.
     * The ${r.Lower} may be null.
     *
     * @return the ${r.Lower} for this ${id.Lower}
     */
    ${a.Upper} get${r.Upper}();
#elseif ($a.Cardinality.toString() == "StrictlyOne")

    /**
     * Return the ${r.Lower} for this ${id.Lower}.
     * The ${r.Lower} will not be null.
     *
     * @return the ${r.Lower} for this ${id.Lower}
     */
    ${a.Upper} get${r.Upper}();
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${id.Lower}.  The returned ${coll.InterfaceDescription} may be
     * empty but will not be null.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${id.Lower}
     */
    ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s();
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${id.Lower}.  The returned ${coll.InterfaceDescription} will
     * not be null and will contain at least one ${r.Lower}.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${id.Lower}
     */
    ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s();
#end
#end
#foreach ($a in $id.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")

    /**
     * Return the ${r.Lower} for this ${id.Lower}.
     * The ${r.Lower} may be null.
     *
     * @return the ${r.Lower} for this ${id.Lower}
     */
    ${a.Upper} get${r.Upper}();
#elseif ($a.Cardinality.toString() == "StrictlyOne")

    /**
     * Return the ${r.Lower} for this ${id.Lower}.
     * The ${r.Lower} will not be null.
     *
     * @return the ${r.Lower} for this ${id.Lower}
     */
    ${a.Upper} get${r.Upper}();
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${id.Lower}.  The returned ${coll.InterfaceDescription} may be
     * empty but will not be null.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${id.Lower}
     */
    ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s();
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${id.Lower}.  The returned ${coll.InterfaceDescription} will
     * not be null and will contain at least one ${r.Lower}.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${id.Lower}
     */
    ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s();
#end
#end
}