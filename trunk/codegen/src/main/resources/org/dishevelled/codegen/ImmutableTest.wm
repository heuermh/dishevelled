#*

    dsh-codegen  Source code generation suite.
    Copyright (c) 2004-2007 held jointly by the individual authors.

    This library is free software; you can redistribute it and/or modify it 
    under the terms of the GNU Lesser General Public License as published 
    by the Free Software Foundation; either version 2.1 of the License, or (at 
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT 
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or 
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
    License for more details.

    You should have received a copy of the GNU Lesser General Public License 
    along with this library;  if not, write to the Free Software Foundation, 
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

    > http://www.gnu.org/copyleft/lesser.html 
    > http://www.opensource.org/licenses/lgpl-license.php

*#
$!{license}
package ${cd.PackageName};

#foreach ($a in $cd.Attributes)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Iterator;
import java.util.Collections;
#end
#end
#foreach ($a in $cd.Associations)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Iterator;
import java.util.Collections;
#end
#end

import junit.framework.TestCase;
#if (($cd.Associations.size() > 0) || ($cd.Specializes.size() > 0))

#end
#foreach ($a in $cd.Associations)
#if (${cd.PackageName} != ${a.PackageName})
import ${a.PackageName}.${a.Upper};
#end
#end
#foreach ($s in $cd.Specializes)
#if (${cd.PackageName} != ${s.PackageName})
import ${s.PackageName}.${s.Upper};
#end
#end

/**
 * Unit test for ${cd.Upper}.
 *
 * @author ${cd.Author}
 * @version ${cd.Version}
 */
public final class ${cd.Upper}Test
    extends TestCase
{
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** Instance of ${a.Upper}. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** Instance of ${a.Upper}. */
    private ${a.Upper} ${r.Mixed};

#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
    /** Empty ${coll.InterfaceDescription} of ${r.Lower}s. */
    private ${coll.InterfaceName}<${a.Upper}> empty${a.Upper}s;

    /** Singleton ${coll.InterfaceDescription} of ${r.Lower}s. */
    private ${coll.InterfaceName}<${a.Upper}> singleton${a.Upper}s;

    /** Full ${coll.InterfaceDescription} of ${r.Lower}s. */
    private ${coll.InterfaceName}<${a.Upper}> full${a.Upper}s;

#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** Instance of ${a.Upper}. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** Instance of ${a.Upper}. */
    private ${a.Upper} ${r.Mixed};

#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
    /** Empty ${coll.InterfaceDescription} of ${r.Lower}s. */
    private ${coll.InterfaceName}<${a.Upper}> empty${a.Upper}s;

    /** Singleton ${coll.InterfaceDescription} of ${r.Lower}s. */
    private ${coll.InterfaceName}<${a.Upper}> singleton${a.Upper}s;

    /** Full ${coll.InterfaceDescription} of ${r.Lower}s. */
    private ${coll.InterfaceName}<${a.Upper}> full${a.Upper}s;

#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    private ${a.Upper} create${r.Upper}()
    {
        // TODO:  create and return a new instance of ${a.Upper}
    }

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    private ${a.Upper} create${r.Upper}()
    {
        // TODO:  create and return a new instance of ${a.Upper}
    }

#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    private ${a.Upper} create${r.Upper}()
    {
        // TODO:  create and return a new instance of ${a.Upper}
    }

    /**
     * Create and return an empty ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return an empty ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createEmpty${r.Upper}s()
    {
        return new ${coll.ImplementationName}<${a.Upper}>();
    }

    /**
     * Create and return a singleton ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return a singleton ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createSingleton${r.Upper}s()
    {
        ${a.Upper} ${r.Mixed} = create${r.Upper}();
        return Collections.singleton${coll.InterfaceDescription}(${r.Mixed});
    }

    /**
     * Create and return a full ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.  The ${coll.InterfaceDescription} of
     * ${a.Lower}s should contain more than one ${a.Upper}.
     *
     * @return a full ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createSingleton${r.Upper}s()
    {
        ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>();
        ${r.Mixed}s.add(create${r.Upper}());
        ${r.Mixed}s.add(create${r.Upper}());
        ${r.Mixed}s.add(create${r.Upper}());
        return ${r.Mixed}s;
    }

#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    private ${a.Upper} create${r.Upper}()
    {
        // TODO:  create and return a new instance of ${a.Upper}
    }

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    private ${a.Upper} create${r.Upper}()
    {
        // TODO:  create and return a new instance of ${a.Upper}
    }

#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    private ${a.Upper} create${r.Upper}()
    {
        // TODO:  create and return a new instance of ${a.Upper}
    }

    /**
     * Create and return an empty ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return an empty ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createEmpty${r.Upper}s()
    {
        return new ${coll.ImplementationName}<${a.Upper}>();
    }

    /**
     * Create and return a singleton ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return a singleton ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createSingleton${r.Upper}s()
    {
        ${a.Upper} ${r.Mixed} = create${r.Upper}();
        return Collections.singleton${coll.InterfaceDescription}(${r.Mixed});
    }

    /**
     * Create and return a full ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.  The ${coll.InterfaceDescription} of
     * ${a.Lower}s should contain more than one ${a.Upper}.
     *
     * @return a full ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createSingleton${r.Upper}s()
    {
        ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>();
        ${r.Mixed}s.add(create${r.Upper}());
        ${r.Mixed}s.add(create${r.Upper}());
        ${r.Mixed}s.add(create${r.Upper}());
        return ${r.Mixed}s;
    }

#end
#end
}