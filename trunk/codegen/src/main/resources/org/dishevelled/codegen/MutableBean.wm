#*

    dsh-codegen  Source code generation suite.
    Copyright (c) 2004-2009 held jointly by the individual authors.

    This library is free software; you can redistribute it and/or modify it 
    under the terms of the GNU Lesser General Public License as published 
    by the Free Software Foundation; either version 3 of the License, or (at 
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT 
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or 
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
    License for more details.

    You should have received a copy of the GNU Lesser General Public License 
    along with this library;  if not, write to the Free Software Foundation, 
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

    > http://www.fsf.org/licensing/licenses/lgpl.html 
    > http://www.opensource.org/licenses/lgpl-license.php

*#
$!{license}
package ${cd.packageName};

import java.beans.PropertyChangeSupport;
import java.beans.PropertyChangeListener;

#foreach ($a in $cd.Attributes)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Collections;
#end
#end
#foreach ($a in $cd.Associations)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Collections;
#end
#end
#if (($cd.Associations.size() > 0) || ($cd.Specializes.size() > 0) || ($cd.Realizes.size() > 0))

#end
#foreach ($a in $cd.Associations)
#if (${cd.PackageName} != ${a.PackageName})
import ${a.PackageName}.${a.Upper};
#end
#end
#foreach ($s in $cd.Specializes)
#if (${cd.PackageName} != ${s.PackageName})
import ${s.PackageName}.${s.Upper};
#end
#end
#foreach ($r in $cd.Realizes)
#if (${cd.PackageName} != ${r.PackageName})
import ${r.PackageName}.${r.Upper};
#end
#end

/**
 * ${cd.Description}.
 *
 * @author ${cd.Author}
 * @version ${cd.Version}
 */
public class ${cd.Upper}
#if ($cd.Specializes.size() > 0)
    extends #foreach ($s in $cd.Specializes)${s.Upper}#if ($velocityCount < ($cd.Specializes.size() - 1)), #end#end
#end
#if ($cd.Realizes.size() > 0)
    implements #foreach ($r in $cd.Realizes)${r.Upper}#if ($velocityCount < ($cd.Realizes.size() - 1)), #end#end
#end
{
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower}. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower}. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower}. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower}. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower}. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower}. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower}. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower}. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#end
#end
    /** Property change support. */
    private final PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    /** Hash code prime. */
    private static final int HASH_CODE_PRIME = 17;

    /** Hash code prime factor. */
    private static final int HASH_CODE_PRIME_FACTOR = 37;


    /**
     * Create a new ${cd.Lower} from the specified required parameters.
     *
#foreach ($a in $cd.Attributes)
#if ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
#foreach ($a in $cd.Associations)
#if ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
     */
    public ${cd.Upper}(
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
                       final ${a.Upper} ${r.Mixed},
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
                       final ${a.Upper} ${r.Mixed},
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
)
    {
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end

#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
        set${r.Upper}(null);
#elseif ($a.Cardinality.toString() == "StrictlyOne")
        set${r.Upper}(${r.Mixed});
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>();
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s);
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
        set${r.Upper}(null);
#elseif ($a.Cardinality.toString() == "StrictlyOne")
        set${r.Upper}(${r.Mixed});
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>();
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s);
#end
#end
    }

    /**
     * Create a new ${cd.Lower} from the specified parameters.
     *
#foreach ($a in $cd.Attributes)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
#foreach ($a in $cd.Associations)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
     */
    public ${cd.Upper}(
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
)
    {
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end

#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        set${r.Upper}(${r.Mixed});
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s);
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        set${r.Upper}(${r.Mixed});
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s);
#end
#end
    }

#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")

    /**
     * Return the ${r.Lower} for this ${cd.Lower}.
     * The ${r.Lower} may be null.
     *
     * @return the ${r.Lower} for this ${cd.Lower}
     */
    public final ${a.Upper} get${r.Upper}()
    {
        return ${r.Mixed};
    }

#if ($a.Bound)
    /**
     * Set the ${r.Lower} for this ${cd.Lower} to <code>${r.Mixed}</code>.
     *
     * <p>This is a bound property.</p>
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
     */
    public final void set${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        ${a.Upper} old${r.Upper} = this.${r.Mixed};
        this.${r.Mixed} = ${r.Mixed};
        propertyChangeSupport.firePropertyChange("${r.Mixed}", old${r.Upper}, this.${r.Mixed});
    }
#else
    /**
     * Set the ${r.Lower} for this ${cd.Lower} to <code>${r.Mixed}</code>.
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
     */
    public final void set${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        this.${r.Mixed} = ${r.Mixed};
    }
#end
#elseif ($a.Cardinality.toString() == "StrictlyOne")

    /**
     * Return the ${r.Lower} for this ${cd.Lower}.
     * The ${r.Lower} will not be null.
     *
     * @return the ${r.Lower} for this ${cd.Lower}
     */
    public final ${a.Upper} get${r.Upper}()
    {
        return ${r.Mixed};
    }

#if ($a.Bound)
    /**
     * Set the ${r.Lower} for this ${cd.Lower} to <code>${r.Mixed}</code>.
     *
     * <p>This is a bound property.</p>
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
     */
    public final void set${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
        ${a.Upper} old${r.Upper} = this.${r.Mixed};
        this.${r.Mixed} = ${r.Mixed};
        propertyChangeSupport.firePropertyChange("${r.Mixed}", old${r.Upper}, this.${r.Mixed});
    }
#else
    /**
     * Set the ${r.Lower} for this ${cd.Lower} to <code>${r.Mixed}</code>.
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
     */
    public final void set${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
        this.${r.Mixed} = ${r.Mixed};
    }
#end
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${cd.Lower}.  The returned ${coll.InterfaceDescription} may be
     * empty but will not be null.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${cd.Lower}
     */
    public final ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s()
    {
        return Collections.unmodifiable${coll.InterfaceName}(${r.Mixed}s);
    }

    /**
     * Add the specified ${r.Lower} to the ${coll.InterfaceDescription} of
     * ${r.Lower}s for this ${cd.Lower}.  An exception
     * may be thrown if the underlying ${coll.InterfaceDescription} prevents
     * <code>${r.Mixed}</code> from being added.
     *
     * @param ${r.Mixed} ${r.Lower} to add
     */
    public final void add${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        ${r.Mixed}s.add(${r.Mixed});
    }

    /**
     * Remove the specified ${r.Lower} from the ${coll.InterfaceDescription} of
     * ${r.Lower}s for this ${cd.Lower}.  An exception
     * may be thrown if the underlying ${coll.InterfaceDescription} prevents
     * <code>${r.Mixed}</code> from being removed.
     *
     * @param ${r.Mixed} ${r.Lower} to remove
     */
    public final void remove${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        ${r.Mixed}s.remove(${r.Mixed});
    }
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${cd.Lower}.  The returned ${coll.InterfaceDescription} will
     * not be null and will contain at least one ${r.Lower}.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${cd.Lower}
     */
    public final ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s()
    {
        return Collections.unmodifiable${coll.InterfaceName}(${r.Mixed}s);
    }

    /**
     * Add the specified ${r.Lower} to the ${coll.InterfaceDescription} of
     * ${r.Lower}s for this ${cd.Lower}.  An exception
     * may be thrown if the underlying ${coll.InterfaceDescription} prevents
     * <code>${r.Mixed}</code> from being added.
     *
     * @param ${r.Mixed} ${r.Lower} to add
     */
    public final void add${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        ${r.Mixed}s.add(${r.Mixed});
    }

    /**
     * Remove the specified ${r.Lower} from the ${coll.InterfaceDescription} of
     * ${r.Lower}s for this ${cd.Lower}.  An exception
     * may be thrown if the underlying ${coll.InterfaceDescription} prevents
     * <code>${r.Mixed}</code> from being removed.
     *
     * @param ${r.Mixed} ${r.Lower} to remove, must not be the last ${r.Lower}
     *    in the ${coll.InterfaceDescription} of ${r.Lower}s for this ${cd.Lower}
     * @throws IllegalStateException if <code>${r.Mixed}</code> is the last ${r.Lower}
     *    in the ${coll.InterfaceDescription} of ${r.Lower}s for this ${cd.Lower}
     */
    public final void remove${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        if ((${r.Mixed}s.size() == 1) && (${r.Mixed}s.contains(${r.Mixed})))
        {
            throw new IllegalStateException("must not remove the last ${r.Lower} from ${r.Mixed}s");
        }
        ${r.Mixed}s.remove(${r.Mixed});
    }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")

    /**
     * Return the ${r.Lower} for this ${cd.Lower}.
     * The ${r.Lower} may be null.
     *
     * @return the ${r.Lower} for this ${cd.Lower}
     */
    public final ${a.Upper} get${r.Upper}()
    {
        return ${r.Mixed};
    }

#if ($a.Bound)
    /**
     * Set the ${r.Lower} for this ${cd.Lower} to <code>${r.Mixed}</code>.
     *
     * <p>This is a bound property.</p>
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
     */
    public final void set${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        ${a.Upper} old${r.Upper} = this.${r.Mixed};
        this.${r.Mixed} = ${r.Mixed};
        propertyChangeSupport.firePropertyChange("${r.Mixed}", old${r.Upper}, this.${r.Mixed});
    }
#else
    /**
     * Set the ${r.Lower} for this ${cd.Lower} to <code>${r.Mixed}</code>.
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
     */
    public final void set${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        this.${r.Mixed} = ${r.Mixed};
    }
#end
#elseif ($a.Cardinality.toString() == "StrictlyOne")

    /**
     * Return the ${r.Lower} for this ${cd.Lower}.
     * The ${r.Lower} will not be null.
     *
     * @return the ${r.Lower} for this ${cd.Lower}
     */
    public final ${a.Upper} get${r.Upper}()
    {
        return ${r.Mixed};
    }

#if ($a.Bound)
    /**
     * Set the ${r.Lower} for this ${cd.Lower} to <code>${r.Mixed}</code>.
     *
     * <p>This is a bound property.</p>
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
     */
    public final void set${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
        ${a.Upper} old${r.Upper} = this.${r.Mixed};
        this.${r.Mixed} = ${r.Mixed};
        propertyChangeSupport.firePropertyChange("${r.Mixed}", old${r.Upper}, this.${r.Mixed});
    }
#else
    /**
     * Set the ${r.Lower} for this ${cd.Lower} to <code>${r.Mixed}</code>.
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
     */
    public final void set${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
        this.${r.Mixed} = ${r.Mixed};
    }
#end
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${cd.Lower}.  The returned ${coll.InterfaceDescription} may be
     * empty but will not be null.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${cd.Lower}
     */
    public final ${coll.interfaceName}<${a.Upper}> get${r.Upper}s()
    {
        return Collections.unmodifiable${coll.InterfaceName}(${r.Mixed}s);
    }

    /**
     * Add the specified ${r.Lower} to the ${coll.InterfaceDescription} of
     * ${r.Lower}s for this ${cd.Lower}.  An exception
     * may be thrown if the underlying ${coll.InterfaceDescription} prevents
     * <code>${r.Mixed}</code> from being added.
     *
     * @param ${r.Mixed} ${r.Lower} to add
     */
    public final void add${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        ${r.Mixed}s.add(${r.Mixed});
    }

    /**
     * Remove the specified ${r.Lower} from the ${coll.InterfaceDescription} of
     * ${r.Lower}s for this ${cd.Lower}.  An exception
     * may be thrown if the underlying ${coll.InterfaceDescription} prevents
     * <code>${r.Mixed}</code> from being removed.
     *
     * @param ${r.Mixed} ${r.Lower} to remove
     */
    public final void remove${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        ${r.Mixed}s.remove(${r.Mixed});
    }
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${cd.Lower}.  The returned ${coll.InterfaceDescription} will
     * not be null and will contain at least one ${r.Lower}.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${cd.Lower}
     */
    public final ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s()
    {
        return Collections.unmodifiable${coll.InterfaceName}(${r.Mixed}s);
    }

    /**
     * Add the specified ${r.Lower} to the ${coll.InterfaceDescription} of
     * ${r.Lower}s for this ${cd.Lower}.  An exception
     * may be thrown if the underlying ${coll.InterfaceDescription} prevents
     * <code>${r.Mixed}</code> from being added.
     *
     * @param ${r.Mixed} ${r.Lower} to add
     */
    public final void add${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        ${r.Mixed}s.add(${r.Mixed});
    }

    /**
     * Remove the specified ${r.Lower} from the ${coll.InterfaceDescription} of
     * ${r.Lower}s for this ${cd.Lower}.  An exception
     * may be thrown if the underlying ${coll.InterfaceDescription} prevents
     * <code>${r.Mixed}</code> from being removed.
     *
     * @param ${r.Mixed} ${r.Lower} to remove, must not be the last ${r.Lower}
     *    in the ${coll.InterfaceDescription} of ${r.Lower}s for this ${cd.Lower}
     * @throws IllegalStateException if <code>${r.Mixed}</code> is the last ${r.Lower}
     *    in the ${coll.InterfaceDescription} of ${r.Lower}s for this ${cd.Lower}
     */
    public final void remove${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        if ((${r.Mixed}s.size() == 1) && (${r.Mixed}s.contains(${r.Mixed})))
        {
            throw new IllegalStateException("must not remove the last ${r.Lower} from ${r.Mixed}s");
        }
        ${r.Mixed}s.remove(${r.Mixed});
    }
#end
#end

    /**
     * Add a property change listener to this ${cd.Lower}.
     * The listener is registered for all properties.
     *
     * @param listener property change listener to add
     */
    public void addPropertyChangeListener(final PropertyChangeListener listener)
    {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Add a property change listener for the specified property
     * to this ${cd.Lower}.  The listener will be invoked only when a call
     * on firePropertyChange names that specific property.
     *
     * @param propertyName specific property name
     * @param listener property change listener to add
     */
    public void addPropertyChangeListener(final String propertyName,
                                          final PropertyChangeListener listener)
    {
        propertyChangeSupport.addPropertyChangeListener(propertyName, listener);
    }

    /**
     * Remove a property change listener from this ${cd.Lower}.
     * This removes a listener that was registered for all properties.
     *
     * @param listener property change listener to remove
     */
    public void removePropertyChangeListener(final PropertyChangeListener listener)
    {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    /**
     * Remove a property change listener for the specified property from
     * this ${cd.Lower}.
     *
     * @param propertyName specific property name
     * @param listener property change listener to remove
     */
    public void removePropertyChangeListener(final String propertyName,
                                             final PropertyChangeListener listener)
    {
        propertyChangeSupport.removePropertyChangeListener(propertyName, listener);
    }

    /** {@inheritDoc} */
    public final boolean equals(final Object o)
    {
        if (o == this)
        {
            return true;
        }
        if (!(o instanceof ${cd.Upper}))
        {
            return false;
        }

        ${cd.Upper} ${cd.Mixed} = (${cd.Upper}) o;

        return (true
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
            && ((${r.Mixed} == null) ? (${cd.Mixed}.get${r.Upper}() == null) : ${r.Mixed}.equals(${cd.Mixed}.get${r.Upper}()))
#elseif ($a.Cardinality.toString() == "StrictlyOne")
            && (${r.Mixed}.equals(${cd.Mixed}.get${r.Upper}()))
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
            && (${r.Mixed}s.equals(${cd.Mixed}.get${r.Upper}s()))
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
            && ((${r.Mixed} == null) ? (${cd.Mixed}.get${r.Upper}() == null) : ${r.Mixed}.equals(${cd.Mixed}.get${r.Upper}()))
#elseif ($a.Cardinality.toString() == "StrictlyOne")
            && (${r.Mixed}.equals(${cd.Mixed}.get${r.Upper}()))
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
            && (${r.Mixed}s.equals(${cd.Mixed}.get${r.Upper}s()))
#end
#end
        );
    }

    /** {@inheritDoc} */
    public final int hashCode()
    {
        int result = HASH_CODE_PRIME;
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
#if ($a.Upper == "boolean")
        result = HASH_CODE_PRIME_FACTOR * result + (${r.Mixed} ? 0 : 1);
#elseif (($a.Upper == "byte") || ($a.Upper == "char") || ($a.Upper == "short") || ($a.Upper == "int"))
        result = HASH_CODE_PRIME_FACTOR * result + (int) ${r.Mixed};
#elseif ($a.Upper == "long")
        result = HASH_CODE_PRIME_FACTOR * result + (int) (${r.Mixed} ^ (${r.Mixed} >>> 32));
#elseif ($a.Upper == "float")
        result = HASH_CODE_PRIME_FACTOR * result + Float.floatToIntBits(${r.Mixed});
#elseif ($a.Upper == "double")
        result = HASH_CODE_PRIME_FACTOR * result + (int) (Double.doubleToLongBits(${r.Mixed}) ^ (Double.doubleToLongBits(${r.Mixed}) >>> 32));
#else
        result = HASH_CODE_PRIME_FACTOR * result + ((${r.Mixed} == null) ? 0 : ${r.Mixed}.hashCode());
#end
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
        result = HASH_CODE_PRIME_FACTOR * result + ${r.Mixed}s.hashCode();
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        result = HASH_CODE_PRIME_FACTOR * result + ((${r.Mixed} == null) ? 0 : ${r.Mixed}.hashCode());
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
        result = HASH_CODE_PRIME_FACTOR * result + ${r.Mixed}s.hashCode();
#end
#end
        return result;
    }
}