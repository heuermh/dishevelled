<?xml version="1.0"?>
<!--

    dsh-vocabulary  A description of concepts and their relations in a domain.
    Copyright (c) 2002-2009 held jointly by the individual authors.

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation; either version 3 of the License, or (at
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
    License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this library;  if not, write to the Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

    > http://www.fsf.org/licensing/licenses/lgpl.html
    > http://www.opensource.org/licenses/lgpl-license.php

-->
<document>
  <properties>
    <title>vocabulary</title>
  </properties>
<body>

<section name="Summary">

<p>
dishevelled.org <b>vocabulary</b> provides support for structured vocabularies, 
descriptions of concepts and their relations in a domain.  The vocabulary library
requires java version 1.5 or later.
</p>

<p>
A structured vocabulary is a description of concepts and their relations in a domain.
<a href="apidocs/org/dishevelled/vocabulary/Concept.html">Concepts</a> are vocabulary words
or terms with an accession and a definition.  Concepts within the same
<a href="apidocs/org/dishevelled/vocabulary/Domain.html">domain</a> (namespace) may have
<a href="apidocs/org/dishevelled/vocabulary/Relation.html">relations</a> to each other, such as
concept B is-a concept A and concept C is-part-of concept B.  Concepts in different domains may
have <a href="apidocs/org/dishevelled/vocabulary/Projection.html">projections</a> to each other
through a <a href="apidocs/org/dishevelled/vocabulary/Mapping.html">mapping</a> across domains.
For example, concept A in domain 1 is-similar-to concept A in domain 2 through a mapping of domain 1
to domain 2.  Domains and mappings have an
<a href="apidocs/org/dishevelled/vocabulary/Authority.html">authority</a>.
</p>

<p>
<a href="apidocs/org/dishevelled/vocabulary/Assignable.html">Assignable</a> entities can
be annotated with structured vocabularies by
<a href="apidocs/org/dishevelled/vocabulary/Assignment.html">assignment</a> to a concept.
For example, a business object can be assigned to concepts A and C in domain 1 and to concept
A in domain 2.  Assignments are supported by
<a href="apidocs/org/dishevelled/vocabulary/Evidence.html">evidence</a> and have an authority.
</p>

</section>
<section name="Bookmark example">

<p>
As a concrete example, consider topics for categorizing bookmarks.  A bookmark that can be
annotated using a structured vocabulary might be implemented in one of two patterns, either
by extending the AbstractAssignable class:
</p>

<source>
class Bookmark
  extends AbstractAssignable
{
  private final String name;
  private final String description;
  private final URL url;

  public Bookmark(final String name,
                  final String description,
                  final URL url)
  {
    super();
    this.name = name;
    this.description = description;
    this.url = url;
  }

  // ...
}
</source>

<p>
or by creating an AssignableBookmark class that extends a simple bookmark class and adds
assignable support via delegation to AssignableSupport:
</p>

<source>
class Bookmark
{
  private final String name;
  private final String description;
  private final URL url;

  public Bookmark(final String name,
                  final String description,
                  final URL url)
  {
    this.name = name;
    this.description = description;
    this.url = url;
  }

  // ...
}

class AssignableBookmark
  extends Bookmark
  implements Assignable
{
  private final AssignableSupport assignableSupport;

  public AssignableBookmark(final String name,
                            final String description,
                            final URL url)
  {
    super(name, description, url);
    assignableSupport = new AssignableSupport(this);
  }

  /** {@inheritDoc} */
  public Set&lt;Assignment&gt; getAssignments()
  {
    return assignableSupport.getAssignments();
  }

  /** {@inheritDoc} */
  public void addAssignment(final Assignment assignment)
  {
    assignableSupport.addAssignment(assignment);
  }
}
</source>

<p>
Define a structured vocabulary with a local authority.
</p>

<source>
Authority localhost = new Authority("http://localhost");

Domain topics = localhost.createDomain("topics");

Concept viz = topics.createConcept("data visualization", ...);
Concept gd = topics.createConcept("graph drawing", ...);
Concept hci = topics.createConcept("human-computer interaction", ...);
Concept net = topics.creatConcept("complex networks", ...);

// graph drawing is part of data visualization
topics.createRelation("part-of", gd, viz);

// data visualization is a human-computer interaction
topics.createRelation("is-a", viz, hci);

// graph drawing is part of complex networks
topics.createRelation("part-of", gd, net);

// data visualization is part of complex networks
topics.createRelation("part-of", viz, net);
</source>

<p>
Assign bookmarks to the various topics with evidence.
</p>

<source>
Bookmark b0 = new Bookmark(...);
Bookmark b1 = new Bookmark(...);
Bookmark b2 = new Bookmark(...);
Bookmark b3 = new Bookmark(...);

Set&lt;Evidence&gt; weak = Collections.singleton(new Evidence("weak assertion", 0.5d, 1.0d));
Set&lt;Evidence&gt; strong = Collections.singleton(new Evidence("strong assertion", 1.0d, 1.0d));

localhost.createAssignment(gd, b0, strong);
localhost.createAssignment(gd, b1, weak);
localhost.createAssignment(viz, b1, strong);
localhost.createAssignment(net, b2, strong);
localhost.createAssignment(gd, b2, weak);
localhost.createAssignment(net, b3, strong);
</source>

<p>
Define a mapping from an external structured vocabulary, the ACM Computing Classification
System (<a href="http://www.acm.org/class/1998">http://www.acm.org/class/1998</a>) for example,
to the local topics.  Create projections from concepts in the external domain to those
in the local one.
</p>

<source>
Authority acm = new Authority("http://www.acm.org/class/1998");

Domain ccs = acm.createDomain("1998 ACM Computing Classification System");

Concept g = ccs.createConcept("G. Mathemetics of Computing", "G.", ...);
Concept g2 = ccs.createConcept("G.2 DISCRETE MATHEMATICS", "G.2", ...);
Concept g22 = ccs.createConcept("G.2.2. Graph Theory", "G.2.2", ...);

ccs.createRelation("part-of", g2, g);
ccs.createRelation("part-of", g22, g2);

Mapping mapping = localhost.createMapping(ccs, topics);

mapping.createProjection("is-similar-to", g22, net, strong);
</source>

<p>
The assignments, relations, and projections can then be traversed in either the
forward or reverse direction to annotate entities or concepts as necessary.
</p>
</section>

<section name="Acknowledgements">
  <ul>
    <li>Powered by Apache <a href="http://maven.apache.org">Maven</a>.</li>
    <li>Project hosting by <a href="http://sourceforge.net">SourceForge.net</a>.</li>
  </ul>
  <p><img src="http://sourceforge.net/sflogo.php?group_id=113165&amp;type=1" width="88" height="31" border="0" alt="SourceForge.net Logo"/></p>
</section>
</body>
</document>
