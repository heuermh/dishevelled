#*

    dsh-codegen  Source code generation suite.
    Copyright (c) 2004-2012 held jointly by the individual authors.

    This library is free software; you can redistribute it and/or modify it 
    under the terms of the GNU Lesser General Public License as published 
    by the Free Software Foundation; either version 3 of the License, or (at 
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT 
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or 
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
    License for more details.

    You should have received a copy of the GNU Lesser General Public License 
    along with this library;  if not, write to the Free Software Foundation, 
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

    > http://www.fsf.org/licensing/licenses/lgpl.html 
    > http://www.opensource.org/licenses/lgpl-license.php

*#
$!{cd.License}
package ${cd.packageName};

#foreach ($a in $cd.Attributes)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Collections;
#end
#end
#foreach ($a in $cd.Associations)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Collections;
#end
#end
#if (($cd.Associations.size() > 0) || ($cd.Specializes.size() > 0) || ($cd.Realizes.size() > 0))

#end
#foreach ($a in $cd.Associations)
#if (${cd.PackageName} != ${a.PackageName})
import ${a.PackageName}.${a.Upper};
#end
#end
#foreach ($r in $cd.Realizes)
#if (${cd.PackageName} != ${r.PackageName})
import ${r.PackageName}.${r.Upper};
#end
#end

/**
 * ${cd.Description}.
 *
 * @author  ${cd.Author}
 * @version ${cd.Version}
 */
public final class ${cd.Upper}
    extends RuntimeException
#if ($cd.Realizes.size() > 0)
    implements #foreach ($r in $cd.Realizes)${r.Upper}#if ($velocityCount < ($cd.Realizes.size()))
, #end#end

#end
{
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower}. */
    private final ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower}. */
    private final ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower}. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower}. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower}. */
    private final ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower}. */
    private final ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower}. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower}. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#end
#end

    /**
     * Create a new ${cd.Lower} with <code>null</code> as its detail message.
     *
#foreach ($a in $cd.Attributes)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
#foreach ($a in $cd.Associations)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
     */
    public ${cd.Upper}(
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
)
    {
        super();
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        this.${r.Mixed} = ${r.Mixed};
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = Collections.unmodifiable${coll.InterfaceName}(new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s));
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        this.${r.Mixed} = ${r.Mixed};
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = Collections.unmodifiable${coll.InterfaceName}(new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s));
#end
#end
    }

    /**
     * Create a new ${cd.Lower} with the specified detail message.
     *
#foreach ($a in $cd.Attributes)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
#foreach ($a in $cd.Associations)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
     * @param message detail message
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
     */
    public ${cd.Upper}(final String message,
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
)
    {
        super(message);
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        this.${r.Mixed} = ${r.Mixed};
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = Collections.unmodifiable${coll.InterfaceName}(new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s));
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        this.${r.Mixed} = ${r.Mixed};
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = Collections.unmodifiable${coll.InterfaceName}(new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s));
#end
#end
    }

    /**
     * Create a new ${cd.Lower} with the specified detail message and cause.
     *
#foreach ($a in $cd.Attributes)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
#foreach ($a in $cd.Associations)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
     * @param message detail message
     * @param cause ${cd.Lower} cause
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
     */
    public ${cd.Upper}(final String message, final Throwable cause,
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
)
    {
        super(message, cause);
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        this.${r.Mixed} = ${r.Mixed};
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = Collections.unmodifiable${coll.InterfaceName}(new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s));
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        this.${r.Mixed} = ${r.Mixed};
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = Collections.unmodifiable${coll.InterfaceName}(new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s));
#end
#end
    }

    /**
     * Create a new ${cd.Lower} with the specified cause.
     *
#foreach ($a in $cd.Attributes)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
#foreach ($a in $cd.Associations)
#if ($a.Cardinality.toString() == "ZeroToMany")
#set ($r = $a.Role)
     * <p>The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($r = $a.Role)
#set ($coll = $a.CollectionDescription)
     * <p>The specified ${coll.InterfaceDescription} of ${r.Lower}s must contain at least one ${r.Lower}.
     * The ${r.Lower}s in <code>${r.Mixed}s</code> are copied defensively
     * into this class.</p>
     *
#end
#end
     * @param cause ${cd.Lower} cause
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}
#elseif ($a.Cardinality.toString() == "StrictlyOne")
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower}, must not be null
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s, must not be null and must
     *    contain at least one ${r.Lower}
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "OneToMany")
     *
     * @throws IllegalArgumentException if <code>${r.Mixed}s.size() &lt; 1</code>
#end
#end
     */
    public ${cd.Upper}(final Throwable cause,
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       final ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
)
    {
        super(cause);
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalArgumentException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        this.${r.Mixed} = ${r.Mixed};
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = Collections.unmodifiable${coll.InterfaceName}(new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s));
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        this.${r.Mixed} = ${r.Mixed};
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = Collections.unmodifiable${coll.InterfaceName}(new ${coll.ImplementationName}<${a.Upper}>(${r.Mixed}s));
#end
#end
    }

#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")

    /**
     * Return the ${r.Lower} for this ${cd.Lower}.
     * The ${r.Lower} may be null.
     *
     * @return the ${r.Lower} for this ${cd.Lower}
     */
    public ${a.Upper} get${r.Upper}()
    {
        return ${r.Mixed};
    }
#elseif ($a.Cardinality.toString() == "StrictlyOne")

    /**
     * Return the ${r.Lower} for this ${cd.Lower}.
     * The ${r.Lower} will not be null.
     *
     * @return the ${r.Lower} for this ${cd.Lower}
     */
    public ${a.Upper} get${r.Upper}()
    {
        return ${r.Mixed};
    }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${cd.Lower}.  The returned ${coll.InterfaceDescription} may be
     * empty but will not be null.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${cd.Lower}
     */
    public ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s()
    {
        return ${r.Mixed}s;
    }
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${cd.Lower}.  The returned ${coll.InterfaceDescription} will
     * not be null and will contain at least one ${r.Lower}.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${cd.Lower}
     */
    public ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s()
    {
        return ${r.Mixed}s;
    }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")

    /**
     * Return the ${r.Lower} for this ${cd.Lower}.
     * The ${r.Lower} may be null.
     *
     * @return the ${r.Lower} for this ${cd.Lower}
     */
    public ${a.Upper} get${r.Upper}()
    {
        return ${r.Mixed};
    }
#elseif ($a.Cardinality.toString() == "StrictlyOne")

    /**
     * Return the ${r.Lower} for this ${cd.Lower}.
     * The ${r.Lower} will not be null.
     *
     * @return the ${r.Lower} for this ${cd.Lower}
     */
    public ${a.Upper} get${r.Upper}()
    {
        return ${r.Mixed};
    }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${cd.Lower}.  The returned ${coll.InterfaceDescription} may be
     * empty but will not be null.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${cd.Lower}
     */
    public ${coll.interfaceName}<${a.Upper}> get${r.Upper}s()
    {
        return ${r.Mixed}s;
    }
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     * for this ${cd.Lower}.  The returned ${coll.InterfaceDescription} will
     * not be null and will contain at least one ${r.Lower}.
     *
     * @return an unmodifiable ${coll.InterfaceDescription} of ${r.Lower}s
     *    for this ${cd.Lower}
     */
    public ${coll.InterfaceName}<${a.Upper}> get${r.Upper}s()
    {
        return ${r.Mixed}s;
    }
#end
#end
}