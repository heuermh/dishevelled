#*

    dsh-codegen  Source code generation suite.
    Copyright (c) 2004-2012 held jointly by the individual authors.

    This library is free software; you can redistribute it and/or modify it 
    under the terms of the GNU Lesser General Public License as published 
    by the Free Software Foundation; either version 3 of the License, or (at 
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT 
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or 
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
    License for more details.

    You should have received a copy of the GNU Lesser General Public License 
    along with this library;  if not, write to the Free Software Foundation, 
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

    > http://www.fsf.org/licensing/licenses/lgpl.html 
    > http://www.opensource.org/licenses/lgpl-license.php

*#
$!{id.License}
package ${id.PackageName};

#foreach ($a in $id.Attributes)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Iterator;
import java.util.Collections;
#end
#end
#foreach ($a in $id.Associations)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Iterator;
import java.util.Collections;
#end
#end

import junit.framework.TestCase;
#if (($id.Associations.size() > 0) || ($id.Specializes.size() > 0))

#end
#foreach ($a in $id.Associations)
#if (${id.PackageName} != ${a.PackageName})
import ${a.PackageName}.${a.Upper};
#end
#end
#foreach ($s in $id.Specializes)
#if (${id.PackageName} != ${s.PackageName})
import ${s.PackageName}.${s.Upper};
#end
#end

/**
 * Abstract unit test for implementations of ${id.Upper}.
 *
 * @author  ${id.Author}
 * @version ${id.Version}
 */
public abstract class Abstract${id.Upper}Test
    extends TestCase
{
#foreach ($a in $id.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** Instance of ${a.Upper}. */
    protected ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** Instance of ${a.Upper}. */
    protected ${a.Upper} ${r.Mixed};

#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
    /** Empty ${coll.InterfaceDescription} of ${r.Lower}s. */
    protected ${coll.InterfaceName}<${a.Upper}> empty${a.Upper}s;

    /** Singleton ${coll.InterfaceDescription} of ${r.Lower}s. */
    protected ${coll.InterfaceName}<${a.Upper}> singleton${a.Upper}s;

    /** Full ${coll.InterfaceDescription} of ${r.Lower}s. */
    protected ${coll.InterfaceName}<${a.Upper}> full${a.Upper}s;

#end
#end
#foreach ($a in $id.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** Instance of ${a.Upper}. */
    protected ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** Instance of ${a.Upper}. */
    protected ${a.Upper} ${r.Mixed};

#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
    /** Empty ${coll.InterfaceDescription} of ${r.Lower}s. */
    protected ${coll.InterfaceName}<${a.Upper}> empty${a.Upper}s;

    /** Singleton ${coll.InterfaceDescription} of ${r.Lower}s. */
    protected ${coll.InterfaceName}<${a.Upper}> singleton${a.Upper}s;

    /** Full ${coll.InterfaceDescription} of ${r.Lower}s. */
    protected ${coll.InterfaceName}<${a.Upper}> full${a.Upper}s;

#end
#end

#foreach ($a in $id.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    protected abstract ${a.Upper} create${r.Upper}();

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    protected abstract ${a.Upper} create${r.Upper}();

#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    protected abstract ${a.Upper} create${r.Upper}();

    /**
     * Create and return an empty ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return an empty ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createEmpty${r.Upper}s()
    {
        return new ${coll.ImplementationName}<${a.Upper}>();
    }

    /**
     * Create and return a singleton ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return a singleton ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createSingleton${r.Upper}s()
    {
        ${a.Upper} ${r.Mixed} = create${r.Upper}();
        return Collections.singleton${coll.InterfaceName}(${r.Mixed});
    }

    /**
     * Create and return a full ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.  The ${coll.InterfaceDescription} of
     * ${a.Lower}s should contain more than one ${a.Upper}.
     *
     * @return a full ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createFull${r.Upper}s()
    {
        ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>();
        ${r.Mixed}s.add(create${r.Upper}());
        ${r.Mixed}s.add(create${r.Upper}());
        ${r.Mixed}s.add(create${r.Upper}());
        return ${r.Mixed}s;
    }

#end
#end
#foreach ($a in $id.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    protected abstract ${a.Upper} create${r.Upper}();

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    protected abstract ${a.Upper} create${r.Upper}();

#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
    /**
     * Create and return a new instance of ${a.Upper}
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return a new instance of ${a.Upper}
     */
    protected abstract ${a.Upper} create${r.Upper}();

    /**
     * Create and return an empty ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return an empty ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createEmpty${r.Upper}s()
    {
        return new ${coll.ImplementationName}<${a.Upper}>();
    }

    /**
     * Create and return a singleton ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.
     *
     * @return a singleton ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createSingleton${r.Upper}s()
    {
        ${a.Upper} ${r.Mixed} = create${r.Upper}();
        return Collections.singleton${coll.InterfaceName}(${r.Mixed});
    }

    /**
     * Create and return a full ${coll.InterfaceDescription} of ${a.Lower}s
     * for testing <code>${r.Mixed}s</code>.  The ${coll.InterfaceDescription} of
     * ${a.Lower}s should contain more than one ${a.Upper}.
     *
     * @return a full ${coll.InterfaceDescription} of ${a.Lower}s
     */
    private ${coll.InterfaceName}<${a.Upper}> createFull${r.Upper}s()
    {
        ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>();
        ${r.Mixed}s.add(create${r.Upper}());
        ${r.Mixed}s.add(create${r.Upper}());
        ${r.Mixed}s.add(create${r.Upper}());
        return ${r.Mixed}s;
    }

#end
#end
    /**
     * Create and return a new instance of an implementation of ${id.Upper} to test.
     *
#foreach ($a in $id.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
     * @param ${r.Mixed} ${r.Lower}
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s
#end
#end
#foreach ($a in $id.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
     * @param ${r.Mixed} ${r.Lower}
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
     * @param ${r.Mixed}s ${coll.InterfaceDescription} of ${r.Lower}s
#end
#end
     * @return a new instance of an implementation of ${id.Upper} to test
     */
    protected abstract ${id.Upper} create${id.Upper}(
#foreach ($a in $id.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
#foreach ($a in $id.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
                       ${a.Upper} ${r.Mixed},
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
                       ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s,
#end
#end
);

    /** {@inheritDoc} */
    protected void setUp()
    {
#foreach ($a in $id.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        ${r.Mixed} = create${r.Upper}();
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
        empty${r.Upper}s = createEmpty${r.Upper}s();
        singleton${r.Upper}s = createSingleton${r.Upper}s();
        full${r.Upper}s = createFull${r.Upper}s();
#end
#end
#foreach ($a in $id.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToOne") || ($a.Cardinality.toString() == "StrictlyOne"))
        ${r.Mixed} = create${r.Upper}();
#elseif (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
        empty${r.Upper}s = createEmpty${r.Upper}s();
        singleton${r.Upper}s = createSingleton${r.Upper}s();
        full${r.Upper}s = createFull${r.Upper}s();
#end
#end
    }

#foreach ($a in $id.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    public void test${r.Upper}()
    {
        ${id.Upper} ${id.Mixed}0 = create${id.Upper}(null, ...);
        assertEquals(null, ${id.Mixed}0.get${r.Upper}());

        ${id.Upper} ${id.Mixed}1 = create${id.Upper}(${r.Mixed}, ...);
        assertEquals(${r.Mixed}, ${id.Mixed}1.get${r.Upper}());
    }

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    public void test${r.Upper}()
    {
        ${id.Upper} ${id.Mixed} = create${id.Upper}(${r.Mixed}, ...);
        assertTrue(${id.Mixed}.get${r.Upper}() != null);
        assertEquals(${r.Mixed}, ${id.Mixed}.get${r.Upper}());
    }

#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
    public void test${r.Upper}s()
    {
        ${id.Upper} ${id.Mixed}0 = create${id.Upper}(empty${r.Upper}s, ...);
        assertTrue(${id.Mixed}0.get${r.Upper}s() != null);
        assertEquals(empty${r.Upper}s, ${id.Mixed}0.get${r.Upper}s());

        ${id.Upper} ${id.Mixed}1 = create${id.Upper}(singleton${r.Upper}s, ...);
        assertTrue(${id.Mixed}1.get${r.Upper}s() != null);
        assertEquals(singleton${r.Upper}s, ${id.Mixed}1.get${r.Upper}s());

        ${id.Upper} ${id.Mixed}2 = create${id.Upper}(full${r.Upper}s, ...);
        assertTrue(${id.Mixed}2.get${r.Upper}s() != null);
        assertEquals(full${r.Upper}s, ${id.Mixed}2.get${r.Upper}s());
    }

    public void test${r.Upper}sIsCopiedDefensively()
    {
        ${coll.InterfaceName}<${a.Upper}> full${r.Upper}sCopy = createFull${r.Upper}s();
        ${id.Upper} ${id.Mixed} = create${id.Upper}(full${r.Upper}sCopy, ...);
        assertEquals(full${r.Upper}sCopy, ${id.Mixed}.get${r.Upper}s());
        full${r.Upper}sCopy.clear();
        assertTrue(full${r.Upper}sCopy.size() != ${id.Mixed}.get${r.Upper}s().size());
    }

    public void test${r.Upper}sIsImmutable()
    {
        ${id.Upper} ${id.Mixed} = create${id.Upper}(full${r.Upper}s, ...);
        try
        {
            ${id.Mixed}.get${r.Upper}s().clear();
            fail("${id.Mixed} ${r.Mixed}s clear() expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${a.Upper} ${r.Mixed} = create${r.Upper}();
            ${id.Mixed}.get${r.Upper}s().add(${r.Mixed});
            fail("${id.Mixed} ${r.Mixed}s add(${r.Mixed}) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${a.Upper} ${r.Mixed} = create${r.Upper}();
            ${id.Mixed}.get${r.Upper}s().remove(${r.Mixed});
            fail("${id.Mixed} ${r.Mixed}s remove(${r.Mixed}) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().addAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s addAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().removeAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s removeAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().retainAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s retainAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            Iterator<${a.Upper}> ${r.Mixed}s = ${id.Mixed}.get${r.Upper}s().iterator();
            if (${r.Mixed}s.hasNext())
            {
                ${r.Mixed}s.next();
                ${r.Mixed}s.remove();
                fail("${id.Mixed} ${r.Mixed}s iterator remove() expected UnsupportedOperationException");
            }
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
    }

#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
    public void test${r.Upper}s()
    {
        ${id.Upper} ${id.Mixed}0 = create${id.Upper}(singleton${r.Upper}s, ...);
        assertTrue(${id.Mixed}0.get${r.Upper}s() != null);
        assertTrue(${id.Mixed}0.get${r.Upper}s().size() >= 1);
        assertEquals(singleton${r.Upper}s, ${id.Mixed}0.get${r.Upper}s());

        ${id.Upper} ${id.Mixed}1 = create${id.Upper}(full${r.Upper}s, ...);
        assertTrue(${id.Mixed}1.get${r.Upper}s() != null);
        assertTrue(${id.Mixed}1.get${r.Upper}s().size() >= 1);
        assertEquals(full${r.Upper}s, ${id.Mixed}1.get${r.Upper}s());
    }

    public void test${r.Upper}sIsCopiedDefensively()
    {
        ${coll.InterfaceName}<${a.Upper}> full${r.Upper}sCopy = createFull${r.Upper}s();
        ${id.Upper} ${id.Mixed} = create${id.Upper}(full${r.Upper}sCopy, ...);
        assertEquals(full${r.Upper}sCopy, ${id.Mixed}.get${r.Upper}s());
        full${r.Upper}sCopy.clear();
        assertTrue(full${r.Upper}sCopy.size() != ${id.Mixed}.get${r.Upper}s().size());
    }

    public void test${r.Upper}sIsImmutable()
    {
        ${id.Upper} ${id.Mixed} = create${id.Upper}(full${r.Upper}s, ...);
        try
        {
            ${id.Mixed}.get${r.Upper}s().clear();
            fail("${id.Mixed} ${r.Mixed}s clear() expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${a.Upper} ${r.Mixed} = create${r.Upper}();
            ${id.Mixed}.get${r.Upper}s().add(${r.Mixed});
            fail("${id.Mixed} ${r.Mixed}s add(${r.Mixed}) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${a.Upper} ${r.Mixed} = create${r.Upper}();
            ${id.Mixed}.get${r.Upper}s().remove(${r.Mixed});
            fail("${id.Mixed} ${r.Mixed}s remove(${r.Mixed}) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().addAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s addAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().removeAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s removeAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().retainAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s retainAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            Iterator<${a.Upper}> ${r.Mixed}s = ${id.Mixed}.get${r.Upper}s().iterator();
            if (${r.Mixed}s.hasNext())
            {
                ${r.Mixed}s.next();
                ${r.Mixed}s.remove();
                fail("${id.Mixed} ${r.Mixed}s iterator remove() expected UnsupportedOperationException");
            }
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
    }

#end
#end
#foreach ($a in $id.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    public void test${r.Upper}()
    {
        ${id.Upper} ${id.Mixed}0 = create${id.Upper}(null, ...);
        assertEquals(null, ${id.Mixed}0.get${r.Upper}());

        ${id.Upper} ${id.Mixed}1 = create${id.Upper}(${r.Mixed}, ...);
        assertEquals(${r.Mixed}, ${id.Mixed}1.get${r.Upper}());
    }

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    public void test${r.Upper}()
    {
        ${id.Upper} ${id.Mixed} = create${id.Upper}(${r.Mixed}, ...);
        assertTrue(${id.Mixed}.get${r.Upper}() != null);
        assertEquals(${r.Mixed}, ${id.Mixed}.get${r.Upper}());
    }

#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
    public void test${r.Upper}s()
    {
        ${id.Upper} ${id.Mixed}0 = create${id.Upper}(empty${r.Upper}s, ...);
        assertTrue(${id.Mixed}0.get${r.Upper}s() != null);
        assertEquals(empty${r.Upper}s, ${id.Mixed}0.get${r.Upper}s());

        ${id.Upper} ${id.Mixed}1 = create${id.Upper}(singleton${r.Upper}s, ...);
        assertTrue(${id.Mixed}1.get${r.Upper}s() != null);
        assertEquals(singleton${r.Upper}s, ${id.Mixed}1.get${r.Upper}s());

        ${id.Upper} ${id.Mixed}2 = create${id.Upper}(full${r.Upper}s, ...);
        assertTrue(${id.Mixed}2.get${r.Upper}s() != null);
        assertEquals(full${r.Upper}s, ${id.Mixed}2.get${r.Upper}s());
    }

    public void test${r.Upper}sIsCopiedDefensively()
    {
        ${coll.InterfaceName}<${a.Upper}> full${r.Upper}sCopy = createFull${r.Upper}s();
        ${id.Upper} ${id.Mixed} = create${id.Upper}(full${r.Upper}sCopy, ...);
        assertEquals(full${r.Upper}sCopy, ${id.Mixed}.get${r.Upper}s());
        full${r.Upper}sCopy.clear();
        assertTrue(full${r.Upper}sCopy.size() != ${id.Mixed}.get${r.Upper}s().size());
    }

    public void test${r.Upper}sIsImmutable()
    {
        ${id.Upper} ${id.Mixed} = create${id.Upper}(full${r.Upper}s, ...);
        try
        {
            ${id.Mixed}.get${r.Upper}s().clear();
            fail("${id.Mixed} ${r.Mixed}s clear() expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${a.Upper} ${r.Mixed} = create${r.Upper}();
            ${id.Mixed}.get${r.Upper}s().add(${r.Mixed});
            fail("${id.Mixed} ${r.Mixed}s add(${r.Mixed}) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${a.Upper} ${r.Mixed} = create${r.Upper}();
            ${id.Mixed}.get${r.Upper}s().remove(${r.Mixed});
            fail("${id.Mixed} ${r.Mixed}s remove(${r.Mixed}) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().addAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s addAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().removeAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s removeAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().retainAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s retainAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            Iterator<${a.Upper}> ${r.Mixed}s = ${id.Mixed}.get${r.Upper}s().iterator();
            if (${r.Mixed}s.hasNext())
            {
                ${r.Mixed}s.next();
                ${r.Mixed}s.remove();
                fail("${id.Mixed} ${r.Mixed}s iterator remove() expected UnsupportedOperationException");
            }
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
    }

#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
    public void test${r.Upper}s()
    {
        ${id.Upper} ${id.Mixed}0 = create${id.Upper}(singleton${r.Upper}s, ...);
        assertTrue(${id.Mixed}0.get${r.Upper}s() != null);
        assertTrue(${id.Mixed}0.get${r.Upper}s().size() >= 1);
        assertEquals(singleton${r.Upper}s, ${id.Mixed}0.get${r.Upper}s());

        ${id.Upper} ${id.Mixed}1 = create${id.Upper}(full${r.Upper}s, ...);
        assertTrue(${id.Mixed}1.get${r.Upper}s() != null);
        assertTrue(${id.Mixed}1.get${r.Upper}s().size() >= 1);
        assertEquals(full${r.Upper}s, ${id.Mixed}1.get${r.Upper}s());
    }

    public void test${r.Upper}sIsCopiedDefensively()
    {
        ${coll.InterfaceName}<${a.Upper}> full${r.Upper}sCopy = createFull${r.Upper}s();
        ${id.Upper} ${id.Mixed} = create${id.Upper}(full${r.Upper}sCopy, ...);
        assertEquals(full${r.Upper}sCopy, ${id.Mixed}.get${r.Upper}s());
        full${r.Upper}sCopy.clear();
        assertTrue(full${r.Upper}sCopy.size() != ${id.Mixed}.get${r.Upper}s().size());
    }

    public void test${r.Upper}sIsImmutable()
    {
        ${id.Upper} ${id.Mixed} = create${id.Upper}(full${r.Upper}s, ...);
        try
        {
            ${id.Mixed}.get${r.Upper}s().clear();
            fail("${id.Mixed} ${r.Mixed}s clear() expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${a.Upper} ${r.Mixed} = create${r.Upper}();
            ${id.Mixed}.get${r.Upper}s().add(${r.Mixed});
            fail("${id.Mixed} ${r.Mixed}s add(${r.Mixed}) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${a.Upper} ${r.Mixed} = create${r.Upper}();
            ${id.Mixed}.get${r.Upper}s().remove(${r.Mixed});
            fail("${id.Mixed} ${r.Mixed}s remove(${r.Mixed}) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().addAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s addAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().removeAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s removeAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            ${id.Mixed}.get${r.Upper}s().retainAll(full${r.Upper}s);
            fail("${id.Mixed} ${r.Mixed}s retainAll(full${r.Upper}s) expected UnsupportedOperationException");
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
        try
        {
            Iterator<${a.Upper}> ${r.Mixed}s = ${id.Mixed}.get${r.Upper}s().iterator();
            if (${r.Mixed}s.hasNext())
            {
                ${r.Mixed}s.next();
                ${r.Mixed}s.remove();
                fail("${id.Mixed} ${r.Mixed}s iterator remove() expected UnsupportedOperationException");
            }
        }
        catch (UnsupportedOperationException e)
        {
            // expected
        }
    }

#end
#end
    public void testEquals()
    {
        ${id.Upper} ${id.Mixed}0 = create${id.Upper}(...);
        ${id.Upper} ${id.Mixed}1 = create${id.Upper}(...);

        assertFalse(${id.Mixed}0.equals(null));
        assertFalse(${id.Mixed}1.equals(null));
        assertFalse(${id.Mixed}0.equals(new Object()));
        assertFalse(${id.Mixed}1.equals(new Object()));
        assertTrue(${id.Mixed}0.equals(${id.Mixed}0));
        assertTrue(${id.Mixed}1.equals(${id.Mixed}1));
        assertFalse(${id.Mixed}0 == ${id.Mixed}1);
        if (${id.Mixed}0.equals(${id.Mixed}1))
        {
            assertTrue(${id.Mixed}1.equals(${id.Mixed}0));
        }
        if (${id.Mixed}1.equals(${id.Mixed}0))
        {
            assertTrue(${id.Mixed}0.equals(${id.Mixed}1));
        }
    }

    public void testHashCode()
    {
        ${id.Upper} ${id.Mixed}0 = create${id.Upper}(...);
        ${id.Upper} ${id.Mixed}1 = create${id.Upper}(...);

        assertEquals(${id.Mixed}0.hashCode(), ${id.Mixed}0.hashCode());
        assertEquals(${id.Mixed}1.hashCode(), ${id.Mixed}1.hashCode());
        if (${id.Mixed}0.equals(${id.Mixed}1))
        {
            assertEquals(${id.Mixed}0.hashCode(), ${id.Mixed}1.hashCode());
            assertEquals(${id.Mixed}1.hashCode(), ${id.Mixed}0.hashCode());
        }
        if (${id.Mixed}1.equals(${id.Mixed}0))
        {
            assertEquals(${id.Mixed}0.hashCode(), ${id.Mixed}1.hashCode());
            assertEquals(${id.Mixed}1.hashCode(), ${id.Mixed}0.hashCode());
        }
    }
}