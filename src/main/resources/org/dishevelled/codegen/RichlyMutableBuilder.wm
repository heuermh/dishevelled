#*

    dsh-codegen  Source code generation suite.
    Copyright (c) 2004-2012 held jointly by the individual authors.

    This library is free software; you can redistribute it and/or modify it 
    under the terms of the GNU Lesser General Public License as published 
    by the Free Software Foundation; either version 3 of the License, or (at 
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT 
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or 
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public 
    License for more details.

    You should have received a copy of the GNU Lesser General Public License 
    along with this library;  if not, write to the Free Software Foundation, 
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

    > http://www.fsf.org/licensing/licenses/lgpl.html 
    > http://www.opensource.org/licenses/lgpl-license.php

*#
$!{cd.License}
package ${cd.packageName};

#foreach ($a in $cd.Attributes)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Arrays;
import java.util.Collections;
#end
#end
#foreach ($a in $cd.Associations)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
import ${a.CollectionDescription.InterfacePackageName}.${a.CollectionDescription.InterfaceName};
import ${a.CollectionDescription.ImplementationPackageName}.${a.CollectionDescription.ImplementationName};
import java.util.Arrays;
import java.util.Collections;
#end
#end
#if (($cd.Associations.size() > 0) || ($cd.Specializes.size() > 0) || ($cd.Realizes.size() > 0))

#end
#foreach ($a in $cd.Associations)
#if (${cd.PackageName} != ${a.PackageName})
import ${a.PackageName}.${a.Upper};
#end
#end
#foreach ($s in $cd.Specializes)
#if (${cd.PackageName} != ${s.PackageName})
import ${s.PackageName}.${s.Upper};
#end
#end
#foreach ($r in $cd.Realizes)
#if (${cd.PackageName} != ${r.PackageName})
import ${r.PackageName}.${r.Upper};
#end
#end

/**
 * Fluent builder API for creating ${cd.Lower}s.
 *
 * @author  ${cd.Author}
 * @version ${cd.Version}
 */
public final class ${cd.Upper}Builder
{
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower} builder. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower} builder. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower} builder. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower} builder. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower} builder. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "StrictlyOne")
    /** ${StringUtils.capitalize($r.Lower)} for this ${cd.Lower} builder. */
    private ${a.Upper} ${r.Mixed};

#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower} builder. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)
    /** ${StringUtils.capitalize($coll.InterfaceDescription)} of ${r.Lower}s for this ${cd.Lower} builder. */
    private final ${coll.InterfaceName}<${a.Upper}> ${r.Mixed}s;

#end
#end

    /**
     * Create a new ${cd.Lower} builder.
     */
    public ${cd.Upper}Builder()
    {
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>();
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if (($a.Cardinality.toString() == "ZeroToMany") || ($a.Cardinality.toString() == "OneToMany"))
#set ($coll = $a.CollectionDescription)
        this.${r.Mixed}s = new ${coll.ImplementationName}<${a.Upper}>();
#end
#end
    }

#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")

    /**
     * Return this ${cd.Lower} builder configured with the specified ${r.Lower}.
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower} builder
     * @return this ${cd.Lower} builder configured with the specified ${r.Lower}
     */
    public ${cd.Upper}Builder with${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        this.${r.Mixed} = ${r.Mixed};
        return this;
    }
#elseif ($a.Cardinality.toString() == "StrictlyOne")

    /**
     * Return this ${cd.Lower} builder configured with the specified ${r.Lower}.
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower} builder, must not be null
     * @return this ${cd.Lower} builder configured with the specified ${r.Lower}
     */
    public ${cd.Upper}Builder with${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
        this.${r.Mixed} = ${r.Mixed};
        return this;
    }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return this ${cd.Lower} builder configured with the specified ${r.Lower}(s).  Multiple calls to
     * this method add to the ${coll.InterfaceDescription} of ${r.Lower}s for this ${cd.Lower} builder.
     *
     * @param ${r.Mixed}s variable number of ${r.Lower}s for this ${cd.Lower} builder, must not be null
     * @return this ${cd.Lower} builder configured with the specified ${r.Lower}(s)
     */
    public ${cd.Upper}Builder with${r.Upper}s(final ${a.Upper}... ${r.Mixed}s)
    {
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        for (${a.Upper} ${r.Mixed} : ${r.Mixed}s)
        {
            this.${r.Mixed}s.add(${r.Mixed});
        }
        return this;
    }
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return this ${cd.Lower} builder configured with the specified ${r.Lower}(s).  Multiple calls to
     * this method add to the ${coll.InterfaceDescription} of ${r.Lower}s for this ${cd.Lower} builder.
     *
     * @param ${r.Mixed}s variable number of ${r.Lower}s for this ${cd.Lower} builder, must not be null
     * @return this ${cd.Lower} builder configured with the specified ${r.Lower}(s)
     */
    public ${cd.Upper}Builder with${r.Upper}s(final ${a.Upper}... ${r.Mixed}s)
    {
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        for (${a.Upper} ${r.Mixed} : ${r.Mixed}s)
        {
            this.${r.Mixed}s.add(${r.Mixed});
        }
        return this;
    }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "ZeroToOne")

    /**
     * Return this ${cd.Lower} builder configured with the specified ${r.Lower}.
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower} builder
     * @return this ${cd.Lower} builder configured with the specified ${r.Lower}
     */
    public ${cd.Upper}Builder with${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        this.${r.Mixed} = ${r.Mixed};
        return this;
    }
#elseif ($a.Cardinality.toString() == "StrictlyOne")

    /**
     * Return this ${cd.Lower} builder configured with the specified ${r.Lower}.
     *
     * @param ${r.Mixed} ${r.Lower} for this ${cd.Lower} builder, must not be null
     * @return this ${cd.Lower} builder configured with the specified ${r.Lower}
     */
    public ${cd.Upper}Builder with${r.Upper}(final ${a.Upper} ${r.Mixed})
    {
        if (${r.Mixed} == null)
        {
            throw new IllegalArgumentException("${r.Mixed} must not be null");
        }
        this.${r.Mixed} = ${r.Mixed};
        return this;
    }
#elseif ($a.Cardinality.toString() == "ZeroToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return this ${cd.Lower} builder configured with the specified ${r.Lower}(s).  Multiple calls to
     * this method add to the ${coll.InterfaceDescription} of ${r.Lower}s for this ${cd.Lower} builder.
     *
     * @param ${r.Mixed}s variable number of ${r.Lower}s for this ${cd.Lower} builder, must not be null
     * @return this ${cd.Lower} builder configured with the specified ${r.Lower}(s)
     */
    public ${cd.Upper}Builder with${r.Upper}s(final ${a.Upper}... ${r.Mixed}s)
    {
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        for (${a.Upper} ${r.Mixed} : ${r.Mixed}s)
        {
            this.${r.Mixed}s.add(${r.Mixed});
        }
        return this;
    }
#elseif ($a.Cardinality.toString() == "OneToMany")
#set ($coll = $a.CollectionDescription)

    /**
     * Return this ${cd.Lower} builder configured with the specified ${r.Lower}(s).  Multiple calls to
     * this method add to the ${coll.InterfaceDescription} of ${r.Lower}s for this ${cd.Lower} builder.
     *
     * @param ${r.Mixed}s variable number of ${r.Lower}s for this ${cd.Lower} builder, must not be null
     * @return this ${cd.Lower} builder configured with the specified ${r.Lower}(s)
     */
    public ${cd.Upper}Builder with${r.Upper}s(final ${a.Upper}... ${r.Mixed}s)
    {
        if (${r.Mixed}s == null)
        {
            throw new IllegalArgumentException("${r.Mixed}s must not be null");
        }
        for (${a.Upper} ${r.Mixed} : ${r.Mixed}s)
        {
            this.${r.Mixed}s.add(${r.Mixed});
        }
        return this;
    }
#end
#end

    /**
     * Build and return a new ${cd.Lower} configured from the properties of this builder.
     *
     * @return a new ${cd.Lower} configured from the properties of this builder
     * @throws IllegalStateException if the configuration of this builder results in an illegal state
     */
    public ${cd.Upper} build()
    {
#foreach ($a in $cd.Attributes)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalStateException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalStateException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
#foreach ($a in $cd.Associations)
#set ($r = $a.Role)
#if ($a.Cardinality.toString() == "StrictlyOne")
        if (${r.Mixed} == null)
        {
            throw new IllegalStateException("${r.Mixed} must not be null");
        }
#elseif ($a.Cardinality.toString() == "OneToMany")
        if (${r.Mixed}s.size() < 1)
        {
            throw new IllegalStateException("${r.Mixed}s must contain at least one ${r.Lower}");
        }
#end
#end
        ${cd.Upper} ${cd.Mixed} = new ${cd.Upper}(...);
        return ${cd.Mixed};
    }
}